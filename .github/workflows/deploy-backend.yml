name: Deploy Backend to AWS Elastic Beanstalk

on:
  push:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - '.github/workflows/**'

env:
  AWS_REGION: us-east-1
  EB_APPLICATION_NAME: myspace-backend
  EB_ENVIRONMENT_NAME: Myspacebackend-env

jobs:
  test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    # - name: Run linting
    #   run: npm run lint || echo "No lint script found"

    # - name: Run tests
    #   run: npm test || echo "No test script found"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install EB CLI
      run: pip install awsebcli

    - name: Initialize EB CLI
      run: |
        eb init ${{ env.EB_APPLICATION_NAME }} \
          --region ${{ env.AWS_REGION }} \
          --platform "Node.js 18"

    - name: Deploy to Elastic Beanstalk
      run: |
        eb deploy ${{ env.EB_ENVIRONMENT_NAME }} --staged

    - name: Health check
      run: |
        echo "Waiting for environment to stabilize..."
        sleep 30

        EB_URL=$(eb status ${{ env.EB_ENVIRONMENT_NAME }} --region ${{ env.AWS_REGION }} | grep CNAME | awk '{print $2}')
        
        echo "Environment URL: http://$EB_URL"
        
        if curl -f http://$EB_URL/; then
          echo "✅ Health check passed!"
        else
          echo "❌ Health check failed!"
          exit 1
        fi

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
