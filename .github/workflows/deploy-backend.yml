name: Deploy Backend to AWS Elastic Beanstalk

on:
  push:
    branches: [ main, master ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'backend/**'

env:
  AWS_REGION: us-east-1
  EB_APPLICATION_NAME: myspace-backend
  EB_ENVIRONMENT_NAME: myspace-backend-prod

jobs:
  test:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint || echo "No lint script found"

    - name: Run tests
      run: npm test || echo "No test script found"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install EB CLI
      run: |
        pip install awsebcli

    - name: Deploy to Elastic Beanstalk
      run: |
        # Initialize EB CLI (only needed once)
        eb init ${{ env.EB_APPLICATION_NAME }} \
          --region ${{ env.AWS_REGION }} \
          --platform "Node.js 18" \
          --timeout 20

        # Deploy to environment
        eb deploy ${{ env.EB_ENVIRONMENT_NAME }} \
          --timeout 20 \
          --staged

    - name: Health check
      run: |
        # Wait for deployment to complete
        sleep 30
        
        # Get the environment URL
        EB_URL=$(eb status ${{ env.EB_ENVIRONMENT_NAME }} --region ${{ env.AWS_REGION }} | grep CNAME | awk '{print $2}')
        
        # Test the health endpoint (without API key for basic connectivity)
        curl -f http://$EB_URL/ || echo "Health check failed"

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi 